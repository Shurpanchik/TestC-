using System;
using Microsoft.EntityFrameworkCore;
using Nancy.ModelBinding;
using WebApi.Models;
using System.Linq;

namespace WebApi.Api
{
	public  class MessagesService 
	{
        ApiDbContext context ;
        public MessagesService (ApiDbContext context)
        {
            this.context = context;
        }

        public async Task <List<Message>> GetAllMessages()
        {
            return  await context.Messages.ToListAsync(__token).ConfigureAwait(false);
        }

         public async Task <Message> GetMessageById(Guid id)
        {
            return  await context.Messages.FirstOrDefaultAsync(__message => __message.Id == id, __token).ConfigureAwait(false);
        }

        public async Task <Message> AddResponse(Guid id)
        {
            
				response.CreateDate = DateTimeOffset.UtcNow;
				response.Question = await context.Messages.SingleAsync(__message => __message.Id == id, __token).ConfigureAwait(false);

    			return	await Add(Message response);

        }

        public async Task <Message> AddQuestion(Message question )
        {
            question.CreateDate = DateTimeOffset.UtcNow;
            await Add(question);
            return question;
        }

        public async Task <List<Comment>> GetAllCommentsByMessageId(Guid id)
        {
            var message = await context.Messages.FirstOrDefaultAsync(__message => __message.Id == id, __token).ConfigureAwait(false);

            var comments = from comment in context.Comments
                               where comment.MessageId == id
                               select comment; 

            return comments;  
        }

        private async Task Add(Message response)
        {
            await context.AddAsync(response, __token).ConfigureAwait(false);
            await SaveChangesAsync(response);

            return response;
        }


        private async Task SaveChangesAsync(Message message)
        {
            if(message.Text.contains("Bad word"))
            {
                // произойдет тоже, что и если бы мы сохранили id == null
                message.Id = null;
                await context.AddAsync(message, __token).ConfigureAwait(false);
                await context.SaveChangesAsync(__token).ConfigureAwait(false);
            }
            else
            {
                await context.SaveChangesAsync(__token).ConfigureAwait(false);
            }
        }



		public MessagesModule(MessagesService messagesService ) : base("/messages")
		{
			Get("/", name: "GetAllMessages", action: async (__, __token) =>
			{
				var messages = await messagesService.GetAllMessages(__token)

				return messages;
			});

			Get("/{id}", name: "GetMessageById", action: async (__params, __token) =>
			{
				Guid id = __params.Id;

				var message = await messagesService.GetMessageById(id, __token);

				return message;
			});

			Post("/{questionId}/", name: "AddResponse", action: async (__params, __token) =>
			{
				Guid id = __params.questionId;
				Message response = this.Bind();

				response = await messagesService.AddResponse(id, __token );

				return response;
			});



			Post("/", name: "AddQuestion", action: async (__, __token) =>
			{
				Message question = this.Bind();

                question = await messagesService.AddResponse(question, __token );

				return question;
			});


            // ìåòîä ïîëó÷åíèÿ âñåõ êîìåíòàðèåâ ê ñîîáùåíèþ
            Get("/{id}/comments", name: "GetAllCommentsByMessageId", action: async (__params, __token) =>
            {
                Guid id = __params.id;

                var comments = messagesService.GetAllCommentsByMessageId(id, __token);

                return comments;
            });
        }
    }
}
